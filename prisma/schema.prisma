// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Admin Users
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(VIEWER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  Content  Content[]
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

// Content Management
model Content {
  id          String      @id @default(cuid())
  type        ContentType
  title       String
  slug        String      @unique
  content     String?     @db.Text
  excerpt     String?
  metaTitle   String?
  metaDescription String?
  metaKeywords String?
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  
  author      User            @relation(fields: [authorId], references: [id])
  media       ContentMedia[]
  versions    ContentVersion[]
}

enum ContentType {
  PAGE
  POST
  MUSIC_RELEASE
  NEWS
  BIO
  PRESS_KIT
}

model ContentVersion {
  id        String   @id @default(cuid())
  contentId String
  title     String
  content   String   @db.Text
  version   Int
  createdAt DateTime @default(now())
  
  Content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

// Media Management
model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  fileType     String
  fileSize     Int
  url          String
  cloudinaryId String?
  altText      String?
  caption      String?
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  contentMedia ContentMedia[]
  eventMedia   EventMedia[]
  venues       Venue[]
}

model ContentMedia {
  id        String  @id @default(cuid())
  contentId String
  mediaId   String
  position  Int     @default(0)
  type      String  @default("image") // image, video, audio
  
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  media   Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@unique([contentId, mediaId])
}

// Event Management
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  date        DateTime
  doors       DateTime?
  startTime   DateTime?
  endTime     DateTime?
  venueId     String?
  ticketUrl   String?
  price       String?
  ageLimit    String?
  status      EventStatus @default(SCHEDULED)
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  setlist     String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  venue  Venue?       @relation(fields: [venueId], references: [id])
  media  EventMedia[]
}

enum EventStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  POSTPONED
  COMPLETED
}

model EventMedia {
  id      String @id @default(cuid())
  eventId String
  mediaId String
  type    String // 'poster', 'gallery', 'video'
  
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, mediaId])
}

model Venue {
  id          String  @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  phone       String?
  website     String?
  capacity    Int?
  description String? @db.Text
  imageId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  image  Media?  @relation(fields: [imageId], references: [id])
  events Event[]
}

// Site Settings
model Setting {
  id        String      @id @default(cuid())
  key       String      @unique
  value     String      @db.Text
  type      SettingType @default(TEXT)
  category  String      @default("general")
  updatedAt DateTime    @updatedAt
}

enum SettingType {
  TEXT
  BOOLEAN
  NUMBER
  JSON
  IMAGE
}

// Analytics
model Analytics {
  id         String   @id @default(cuid())
  path       String
  views      Int      @default(1)
  uniqueViews Int     @default(1)
  date       DateTime @default(now())
  userAgent  String?
  referrer   String?
  
  @@unique([path, date])
}